//
// Copyright (c) 2020 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

= GraphQL dynamic Client for MicroProfile 

== Rationale

MicroProfile GraphQL 1.0 has been focused on the server-side enabling to develop and expose GraphQL endpoints. The purpose of this specification is to define a so-called "dynamic" client API.

"Dynamic" means close to the GraphQL specification semantic and structure. We can compare it with what JAX-RS client API is for REST.

A "type-safe" client API, similar to MicroProfile RestClient, should also be proposed in another document.

== Goals

. *Provides full control over the MicroProfile GraphQL capabilities*: operations, arguments, variables, input types, scalars, interface, partial results, errors ...
. *Consistency with MicroProfile GraphQL server* annotations (DateFormat, NumberFormat ...) and capabilities
. *Consistency with MicroProfile*:
    * No dependency outside MicroProfile core 
    * Configuration exclusively based on MicroProfile Config
    * Support of JSON-B format directives


== Non goals

. *Transport layer support*: the GraphQL specification is independent of transport layer.
We propose to stay aligned with this, leaving the final implementation free to use any client network library (JAX-RS, Apache HTTPClient ...).
. *Serialization of custom Java classes to build requests*
. *Deserialization of responses into custom Java classes*

== Focus of release 1.1

A first version of the client API is planned with MicroProfile GraphQL 1.1.

For this first step, we propose to focus on the following core features.

==== GraphQL components support
****
*bold*: supported components.

*_italic bold_*: partially supported components.

blank: not supported components.
****

* *_Document_*
** *_Operation definition_*
*** *_Operation type_*
**** *Query*
**** *Mutation*
**** Subscription
*** *Name*
*** Variable definitions
**** Type
**** Default value
**** Directives
*** Directives
*** *_Selection set_*
**** *_Field_*
***** Alias
***** *Name*
***** *_Arguments_*
****** Variable
****** *Int value*
****** *Float value*
****** *String value*
****** *Boolean value*
****** *Null value*
****** *Enum value*
****** *List value*
****** *Object value*
***** Directives
**** Fragment spread
**** Inline fragment
** Fragment definition
** TypeSystem definition
** TypeSystem extension

==== Java 8 support

Java 8 is still widely used in the industry and we propose to stick to it for a broader adoption.

== Next steps

To be studied for next releases:

* GraphQL subscription
* Reactive API
* https://spec.graphql.org/draft/#sec-Document[Multiple operations inside a GraphQL document]

== Workflow of the API

The usual workflow of the API is illustrated with the following snippet:
[source,Java]
----
// Building of the graphql document.
Document myDocument = document(
                operation(Operation.Type.QUERY,
                        field("people",
                                field("id"),
                                field("name")
                        )));

// Serialization of the document into a string, ready to be sent.
String graphqlRequest = myDocument.toString();

----
== Building a GraphQL Document
.A GraphQL document and how to write it in Java
image::back2back.jpg[back2back]

****
*Static factory methods over constructors*

In order to make the writing of request in Java as close as possible to the original GraphQL's philosophy,
it has been decided to make _static factory methods_ an integral part of the API.

Of course, constructors can still be used but at the cost of clarity and
ease of use.
****
=== Document
==== Static factory methods
[source,Java]
----
@SafeVarargs
public static Document document(Operation... operations);

public static Document document(List<Operation> operations);
----

==== Constructors
[source,Java]
----
public Document(List<Operation> operations);
----

=== Operation
==== Static factory methods
[source,Java]
----
@SafeVarargs
public static List<Operation> operations(Operation... operations);

@SafeVarargs
public static Operation operation(Field... fields);
public static Operation operation(List<Field> fields);

@SafeVarargs
public static Operation operation(Type type, Field... fields);
public static Operation operation(Type type, List<Field> fields);

@SafeVarargs
public static Operation operation(String name, Field... fields);
public static Operation operation(String name, List<Field> fields);

@SafeVarargs
public static Operation operation(Type type, String name, Field... fields);
public static Operation operation(Type type, String name, List<Field> fields);
----
****
When omitted,

* *type* parameter will default to _QUERY_
* *name* parameter will default to an _empty string_
****
==== Constructors
[source,Java]
----
public Operation(Type type, String name, List<Field> fields);
----

=== Field
==== Static factory methods
[source,Java]
----
@SafeVarargs
public static List<Field> fields(Field... fields);

public static Field field(String name);

@SafeVarargs
public static Field field(String name, Field... fields);
public static Field field(String name, List<Field> fields);

@SafeVarargs
public static Field field(String name, Argument... args);

@SafeVarargs
public static Field field(String name, List<Argument> args, Field... fields);
public static Field field(String name, List<Argument> args, List<Field> fields);
----
****
Due to Java's type erasure at compile-time, it is not possible to have both:
[source,Java]
----
public static Field field(String name, List<Field> fields);
----
and
[source,Java]
----
public static Field field(String name, List<Argument> args);
----
So, it has been decided to only retain:
[source,Java]
----
public static Field field(String name, List<Field> fields);
----
****

****
When omitted, *args* and *fields* parameters will default to an _empty list_
****

==== Constructors
[source,Java]
----
public Field(String name, List<Argument> args, List<Field> fields);
----

=== Argument
==== Static factory methods
[source,Java]
----
@SafeVarargs
public static List<Argument> args(Argument... args);

public static Argument arg(String name, Object value);
----

==== Constructors
[source,Java]
----
public Argument(String name, Object value);
----

=== Enum
==== Static factory methods
[source,Java]
----
public static GraphQLEnum gqlEnum(String value);
----

==== Constructors
[source,Java]
----
public GraphQLEnum(String value);
----

=== Input Object
==== Static factory methods
[source,Java]
----
@SafeVarargs
public static InputObject object(InputObjectField... inputObjectFields);
public static InputObject object(List<InputObjectField> inputObjectFields);
----

==== Constructors
[source,Java]
----
public InputObject(List<InputObjectField> inputObjectFields);
----

=== Input Object Field
==== Static factory methods
[source,Java]
----
public static InputObjectField prop(String name, Object value);
----
****
The keyword *prop* (as in _an object's property_) has been chosen instead of *field*
to avoid confusion with the notion of _field of a selection set_.
****

==== Constructors
[source,Java]
----
public InputObjectField(String name, Object value);
----

